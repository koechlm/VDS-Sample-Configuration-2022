<?xml version="1.0" encoding="utf-8"?>

<WPF:MainWindow xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                x:Name="GoToInvSibling"
                xmlns:WPF="clr-namespace:CreateObject.WPF;assembly=CreateObject"
                AllowsTransparency="False" Background="#F0F0F0" ResizeMode="NoResize" SizeToContent="WidthAndHeight">
    <WPF:MainWindow.Style>
        <Style TargetType="{x:Type WPF:MainWindow}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding EditMode}" Value="True">
                    <Setter Property="Title" Value="{Binding UIString[ADSK-GoToInvSibl_LBL00], FallbackValue='Go To Inventor Sibling'}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </WPF:MainWindow.Style>
    <Window.Resources>
        <WPF:IsMoreThanZeroConverter x:Key="MoreThanZeroConverter"/>
        <WPF:InverseBoolConverter x:Key="BoolConvert"/>
        <Style x:Key="DynamicDataGridCellStyle" TargetType="{x:Type DataGridCell}">
            <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    <Setter Property="Foreground"
                            Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}" />
                </Trigger>
                <DataTrigger Binding="{Binding Typ}" Value="String">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <TextBox Text="{WPF:ValidatedBinding Value}" 
                                BorderThickness="0" CharacterCasing="{Binding Case}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Typ}" Value="DateTime">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <DatePicker SelectedDate="{WPF:ValidatedBinding Value}" SelectedDateFormat="Short" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Typ}" Value="Numeric">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <TextBox Text="{WPF:ValidatedBinding Value, StringFormat=N}" BorderThickness="0"
                                         Height="25" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Typ}" Value="Bool">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <ComboBox Text="{WPF:ValidatedBinding Value}" IsEditable="True">
                                    <ComboBoxItem Content="True" />
                                    <ComboBoxItem Content="False" />
                                </ComboBox>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding ListValues.Count, Converter={StaticResource MoreThanZeroConverter}}" Value="True">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <ComboBox ItemsSource="{Binding ListValues}" Text="{WPF:ValidatedBinding Value}"
                                          IsEditable="{Binding EnforceListValues, Converter={StaticResource BoolConvert}}" BorderThickness="0"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="DynamicDataGridLabelStyle" TargetType="{x:Type DataGridCell}">
            <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
            <Setter Property="Height" Value="Auto" />
            <Setter Property="Margin" Value="0,4,0,0" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="IsHitTestVisible" Value="False" />
        </Style>
        <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
            <Setter Property="Margin" Value="0,0,0,0" />
            <Setter Property="Height" Value="24" />
            <Setter Property="Padding" Value="5,3,3,2" />
            <Setter Property="VerticalAlignment" Value="Stretch" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="BorderBrush" Value="#FFABADB3" />
            <Setter Property="BorderThickness" Value="1,1,1,0" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="BorderBrush" Value="#ff0000" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Setter Property="Margin" Value="0,0,0,0" />
            <Setter Property="Height" Value="24" />
            <Setter Property="VerticalAlignment" Value="Stretch" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="BorderBrush" Value="#FFABADB3" />
            <Setter Property="BorderThickness" Value="0,1,1,0" />
            <Setter Property="Padding" Value="5,3,3,2" />
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip"
                            Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                </Trigger>
                <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowColorKey}}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
            <Setter Property="Height" Value="24" />
            <Setter Property="Margin" Value="0,0,0,0" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Stretch" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
            <Setter Property="BorderBrush" Value="#FFABADB3" />
            <Setter Property="BorderThickness" Value="0,1,1,0" />
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip"
                            Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type DatePicker}">
            <Setter Property="Height" Value="22" />
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip"
                            Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="Required" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource Self}}" Value="">
                    <Setter Property="BorderBrush" Value="Red" />
                    <Setter Property="BorderThickness" Value="1,1,1,1" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="NumSchmCtrlStyle" TargetType="{x:Type WPF:DSNumSchemeCtrl}">
            <Setter Property="Height" Value="Auto" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
            <Setter Property="BorderBrush" Value="Gray" />
            <Setter Property="BorderThickness" Value="0,1,1,0" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding EditMode}" Value="True">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="DocTypeStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding EditMode}" Value="True">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="TemplateCbStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding CreateMode}" Value="True">
                    <Setter Property="ItemsSource" Value="{Binding Templates}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding EditMode}" Value="True">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ButtonGridStyle" TargetType="{x:Type Grid}">
            <Setter Property="Margin" Value="0,15,2,5" />
        </Style>
        <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding CreateMode}" Value="True">
                    <Setter Property="IsExpanded" Value="False" />
                </DataTrigger>
                <DataTrigger Binding="{Binding HasItems, ElementName=NumSchms}" Value="False">
                    <Setter Property="IsExpanded" Value="True" />
                </DataTrigger>
                <DataTrigger Binding="{Binding EditMode}" Value="True">
                    <Setter Property="IsExpanded" Value="False" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <!-- This XmlDataProvider is used for defining Name/TemplatePath pairs that are used in the combo box "Document Type" and can be easily extended -->
        <XmlDataProvider x:Key="DocTypes"
                         Source="C:\ProgramData\Autodesk\Vault 2018\Extensions\DataStandard\Vault.Custom\Configuration\File.xml"
                         XPath="/DocTypeData" />
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    </Window.Resources>
    <WPF:MainWindow.InputBindings>
        <KeyBinding Key="F1" Command="{Binding PsCmd[mHelp(500)]}"/>
    </WPF:MainWindow.InputBindings>
    <TabControl Background="#FFE5E5E5">
        <TabItem  Name="tabProperties" Height="0" >
            <AdornerDecorator>
                <Grid x:Name="grdMain" Margin="5" >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Grid x:Name="grdGeneralProps" Margin="0"
              ToolTip="{Binding UIString[], FallbackValue=Siblings}"
              Width="Auto">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="140" />
                            <ColumnDefinition Width="*"
                                  MinWidth="180" MaxWidth="220" />
                        </Grid.ColumnDefinitions>
                        <Label Content="{Binding UIString[LBL6], FallbackValue=Filename}" Grid.Column="0"
            		Visibility="{Binding NumSchmFieldsEmpty, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=DSNumSchmsCtrl}" Height="Auto" />
                        <TextBox x:Name="FILENAME" Text="{Binding Name}" IsReadOnly="True"
            		IsTabStop="False"  Grid.Column="1" Height="Auto" />
                        <Label Content="{Binding UIString[LBL4], FallbackValue=State}" Grid.Column="0" Grid.Row="1" Visibility="{Binding EditMode, Converter={StaticResource BooleanToVisibilityConverter}}" />
                        <TextBox Text="{Binding Prop[_XLTN_STATE].Value}" Grid.Row="1" Grid.Column="1" Visibility="{Binding EditMode, Converter={StaticResource BooleanToVisibilityConverter}}" IsReadOnly="True"/>
                        <Label Content="{Binding UIString[LBL33], FallbackValue=Date Created}" Grid.Column="0" Grid.Row="2" Visibility="{Binding EditMode, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <TextBox Text="{Binding Prop[_XLTN_DATE VERSION CREATED].Value}" Grid.Row="2" Grid.Column="1"  Visibility="{Binding EditMode, Converter={StaticResource BooleanToVisibilityConverter}}" IsReadOnly="True"/>
                        <Label Content="{Binding UIString[LBL34], FallbackValue=Created By}" Grid.Column="0" Grid.Row="3" Visibility="{Binding EditMode, Converter={StaticResource BooleanToVisibilityConverter}}" />
                        <TextBox Text="{Binding Prop[_XLTN_CREATED BY].Value}" Grid.Row="3" Grid.Column="1" Visibility="{Binding EditMode, Converter={StaticResource BooleanToVisibilityConverter}}" IsReadOnly="True" />
                        <Label x:Name="lblComments" Content="{Binding UIString[LBL7], FallbackValue=Comments}" Grid.Row="4" Height="{Binding ActualHeight, ElementName=Comments, Mode=OneWay}" BorderThickness="1" />
                        <TextBox Grid.Row="4" Text="{Binding Prop[_XLTN_COMMENTS].Value}" x:Name="Comments" Grid.Column="1" VerticalScrollBarVisibility="Auto" 
                     Height="Auto" TextWrapping="Wrap" AcceptsReturn="True" VerticalContentAlignment="Top" BorderThickness="0,1,1,1" MinHeight="50" MaxWidth="220" MaxHeight="50"/>
                    </Grid>
                    <Grid Grid.Column="1" Margin="5,0,0,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <DataGrid x:Name="mDerivatives1" AutoGenerateColumns="False" IsReadOnly="True" HorizontalGridLinesBrush="WhiteSmoke" VerticalGridLinesBrush="WhiteSmoke" Grid.Row="1" ScrollViewer.CanContentScroll="True">
                            <DataGrid.Columns>
                                <DataGridTemplateColumn Header="{Binding DataContext.UIString[LBL58], FallbackValue=Preview}">
                                    <DataGridTemplateColumn.HeaderTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding DataContext.UIString[LBL58], RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.HeaderTemplate>
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <Image Source="{Binding Thumbnail}" MaxWidth="64" HorizontalAlignment="Left"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTextColumn x:Name="dT1_Name_Copy" Binding="{Binding Name}">
                                    <DataGridTextColumn.HeaderTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding DataContext.UIString[LBL6], FallbackValue=FileName, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        </DataTemplate>
                                    </DataGridTextColumn.HeaderTemplate>
                                </DataGridTextColumn>
                                <DataGridTextColumn x:Name="dT1_Title_Copy" Binding="{Binding Title}">
                                    <DataGridTextColumn.HeaderTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding DataContext.UIString[LBL2], FallbackValue=Title, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        </DataTemplate>
                                    </DataGridTextColumn.HeaderTemplate>
                                </DataGridTextColumn>
                                <DataGridTextColumn x:Name="dT1_Description_Copy" Binding="{Binding Description}">
                                    <DataGridTextColumn.HeaderTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding DataContext.UIString[LBL3], FallbackValue=Description, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        </DataTemplate>
                                    </DataGridTextColumn.HeaderTemplate>
                                </DataGridTextColumn>
                                <DataGridTextColumn x:Name="dT1_State_Copy" Binding="{Binding State}">
                                    <DataGridTextColumn.HeaderTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding DataContext.UIString[DerivationTree_07], FallbackValue=StateVer, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        </DataTemplate>
                                    </DataGridTextColumn.HeaderTemplate>
                                </DataGridTextColumn>
                                <DataGridTextColumn x:Uid="332" x:Name="dT1_OrigCreateDate_Copy" Binding="{Binding CreateDate}" >
                                    <DataGridTextColumn.HeaderTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding DataContext.UIString[DerivationTree_08], FallbackValue=OrigCreateDate, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        </DataTemplate>
                                    </DataGridTextColumn.HeaderTemplate>
                                </DataGridTextColumn>
                                <DataGridCheckBoxColumn x:Name="dT1_LatestVersion_Copy" Binding="{Binding LVer}">
                                    <DataGridCheckBoxColumn.HeaderTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding DataContext.UIString[DerivationTree_09], FallbackValue=LatestVersion, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        </DataTemplate>
                                    </DataGridCheckBoxColumn.HeaderTemplate>
                                </DataGridCheckBoxColumn>
                                <DataGridCheckBoxColumn x:Name="dT1_LatestReleasedRevision_Copy" Binding="{Binding LReleasedRev}" >
                                    <DataGridCheckBoxColumn.HeaderTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding DataContext.UIString[DerivationTree_10], FallbackValue=LatestReleasedRevision, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        </DataTemplate>
                                    </DataGridCheckBoxColumn.HeaderTemplate>
                                </DataGridCheckBoxColumn>
                                <DataGridTextColumn x:Name="dT1_Comment_Copy" Binding="{Binding Comment}" >
                                    <DataGridTextColumn.HeaderTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding DataContext.UIString[DerivationTree_11], FallbackValue=VerComment, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        </DataTemplate>
                                    </DataGridTextColumn.HeaderTemplate>
                                </DataGridTextColumn>

                            </DataGrid.Columns>
                            <DataGrid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Command="{Binding PsCmd[mSelectedParallelsToClipBoard]}" Header="{Binding UIString[DerivationTree_12], FallbackValue='Copy File Name to Clipboard'}"/>
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                        </DataGrid>

                        <TextBlock x:Name="txtBlck_Notification1" TextWrapping="Wrap" Text="TextBlock" Background="{DynamicResource {x:Static SystemColors.InfoBrushKey}}" Height="24"/>
                    </Grid>
                    <Grid x:Name="ButtonGrid" Style="{StaticResource ButtonGridStyle}" Grid.Row="1" Grid.ColumnSpan="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="80" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="20" />
                            <ColumnDefinition Width="80" />
                        </Grid.ColumnDefinitions>
                        <Button x:Name="btnGoTo" Content="{Binding UIString[ADSK-GoToInvSibl_BTN00], FallbackValue=GoTo}"
                    Command="{Binding CloseWindowCommand, ElementName=GoToInvSibling}" IsEnabled="False"
                    Grid.Column="2" Width="80" Height="24" IsDefault="True" />
                        <Button x:Name="btnEsc" Content="{Binding UIString[BTN2], FallbackValue=Esc}"
                    Command="{Binding CancelWindowCommand, ElementName=GoToInvSibling}" Grid.Column="4" Width="80"
                    HorizontalAlignment="Right" Height="24" IsCancel="True" />
                        <Button x:Name="btnHelp" Content="{Binding UIString[MSDCE_BTN1], FallbackValue=Help}" 
                    Command="{Binding PsCmd[mHelp(500)]}" Height="24" ToolTip="F1" Margin="0" Width="80" />
                    </Grid>
                </Grid>
            </AdornerDecorator>
        </TabItem>
    </TabControl>
</WPF:MainWindow>